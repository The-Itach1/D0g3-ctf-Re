#include<stdio.h>

/****************/
static unsigned char x2time(unsigned char x)
{
	if (x&0x80)
	{
		return (((x<<1)^0x1B)&0xFF);
	}
	return x<<1;
}
/*有限域*3乘法 The x2time() function */
static unsigned char x3time(unsigned char x)
{
	return (x2time(x)^x);
}
/*有限域*4乘法 The x4time() function */
static unsigned char x4time(unsigned char x)
{
	return ( x2time(x2time(x)) );
}
/*有限域*8乘法 The x8time() function */
static unsigned char x8time(unsigned char x)
{
	return ( x2time(x2time(x2time(x))) );
}
/*有限域9乘法 The x9time() function */
static unsigned char x9time(unsigned char x)	//9:1001
{
	return ( x8time(x)^x );
}
/*有限域*B乘法 The xBtime() function */
static unsigned char xBtime(unsigned char x)	//B:1011
{
	return ( x8time(x)^x2time(x)^x );
}
/*有限域*D乘法 The xDtime() function */
static unsigned char xDtime(unsigned char x)	//D:1101
{
	return ( x8time(x)^x4time(x)^x );
}
/*有限域*E乘法 The xEtime() function */
static unsigned char xEtime(unsigned char x)	//E:1110
{
	return ( x8time(x)^x4time(x)^x2time(x) );
}
/***********************/

unsigned char S[16][16] = { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

unsigned char S2[16][16] = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

unsigned int Rcon[10]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36};

void addRoundKey(unsigned char *ipArray,unsigned char *endkey,int n)
{

	int i;
	for(i=0;i<4;i++)
	{
		ipArray[i*4+0]^=endkey[i*4+n*16+0];
		ipArray[i*4+1]^=endkey[i*4+n*16+1];
		ipArray[i*4+2]^=endkey[i*4+n*16+2];
		ipArray[i*4+3]^=endkey[i*4+n*16+3];
	}
	
}

void subBytes(unsigned char *ipArray)
{
	int i;
	int a,b;
	for(i=0;i<16;i++)
	{
		a=ipArray[i]>>4;
		b=ipArray[i]&0xf;
		ipArray[i]=S[a][b];
	}
}

void shiftRows(unsigned char *ipArray)
{
	int i,j,k;
	unsigned char tmp,mid[16];
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			mid[j*4+i]=ipArray[i*4+j];
		}
	}

	for(i=1;i<4;i++)
	{
		for(j=0;j<i;j++)
		{
			tmp=mid[i*4];
			for(k=0;k<3;k++)
			{
				mid[i*4+k]=mid[i*4+k+1];
			}
			mid[i*4+k]=tmp;
		}
	}
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			ipArray[j*4+i]=mid[i*4+j];
		}
	}
}

void mixColumns(unsigned char *ipArray)
{
	unsigned char a[] = {0x02, 0x03, 0x01, 0x01};
	unsigned char tmp[4],mid[16];
	int i,j;
	
	for(i=0,j=0;i<4;i++,j+=4)
	{
		tmp[0]=x2time(ipArray[j]) ^ x3time(ipArray[j+1]) ^ ipArray[j+2] ^ ipArray[j+3];//2 3 1 1
		tmp[1]=ipArray[j] ^ x2time(ipArray[j+1]) ^ x3time(ipArray[j+2]) ^ ipArray[j+3];//1 2 3 1
		tmp[2]=ipArray[j] ^ ipArray[j+1] ^ x2time(ipArray[j+2]) ^ x3time(ipArray[j+3]);//1 1 2 3
		tmp[3]=x3time(ipArray[j]) ^ ipArray[j+1] ^ ipArray[j+2] ^ x2time(ipArray[j+3]);//3 1 1 2
		
		mid[i*4+0]=tmp[0];
		mid[i*4+1]=tmp[1];
		mid[i*4+2]=tmp[2];
		mid[i*4+3]=tmp[3];
	}
	
	for(i=0;i<16;i++)
	{
		ipArray[i]=mid[i];
	}
	
}
//加密 
void AesEncrypt(unsigned char *in,unsigned char *endkey,unsigned char *out)
{
	unsigned char *ipArray;
	int i,j,k;
	int rounds=10;
	ipArray=in;
	

	addRoundKey(ipArray, endkey,0);

	for(i=1;i<10;i++)
	{
		subBytes(ipArray);
		shiftRows(ipArray);
		mixColumns(ipArray);
		addRoundKey(ipArray,endkey,i);
	}
	
	subBytes(ipArray);
	shiftRows(ipArray);
	addRoundKey(ipArray,endkey,10);

	
}

void inv_shiftRows(unsigned char *state)
{
	int i,j,k;
	unsigned char tmp,mid[16];
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			mid[j*4+i]=state[i*4+j];
		}
	}

	for(i=1;i<4;i++)
	{
		for(j=0;j<i;j++)
		{
			tmp=mid[i*4+3];
			for(k=3;k>0;k--)
			{
				mid[i*4+k]=mid[i*4+k-1];
			}
			mid[i*4+k]=tmp;
		}
	}
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			state[j*4+i]=mid[i*4+j];
		}
	}
}

void inv_subBytes(unsigned char *state)
{
	int i;
	int a,b;
	for(i=0;i<16;i++)
	{
		a=state[i]>>4;
		b=state[i]&0xf;
		state[i]=S2[a][b];
	}
	
}

void inv_mixColumns(unsigned char *state)
{
	unsigned char a[] = {0x0E, 0x0B, 0x0D, 0x09};
	unsigned char tmp[4],mid[16];
	int i,j;
	
	for(i=0,j=0;i<4;i++,j+=4)
	{
		tmp[0]=xEtime(state[j]) ^ xBtime(state[j+1]) ^ xDtime(state[j+2]) ^ x9time(state[j+3]);//E B D 9
		tmp[1]=x9time(state[j]) ^ xEtime(state[j+1]) ^ xBtime(state[j+2]) ^ xDtime(state[j+3]);//9 E B D
		tmp[2]=xDtime(state[j]) ^ x9time(state[j+1]) ^ xEtime(state[j+2]) ^ xBtime(state[j+3]);//D 9 E B
		tmp[3]=xBtime(state[j]) ^ xDtime(state[j+1]) ^ x9time(state[j+2]) ^ xEtime(state[j+3]);//B D 9 E
		
		mid[i*4+0]=tmp[0];
		mid[i*4+1]=tmp[1];
		mid[i*4+2]=tmp[2];
		mid[i*4+3]=tmp[3];
	}
	
	for(i=0;i<16;i++)
	{
		state[i]=mid[i];
	}
}
//解密 
void AesDecrypt(unsigned char *in,unsigned char *endkey,unsigned char *out)
{
	unsigned char *state;
	int i,j,k;
	int rounds=10;
	state=in;
	
	addRoundKey(state,endkey,10);
	
	for(i=rounds-1;i>0;i--)
	{
		inv_shiftRows(state);
		inv_subBytes(state);
		addRoundKey(state,endkey,i);
		inv_mixColumns(state);
	}
	
	inv_shiftRows(state);
	inv_subBytes(state);
	addRoundKey(state,endkey,0);
	
}

//扩展密钥 
void leftLoop(unsigned char mid[])
{
	unsigned char t;
	t=mid[0]; mid[0]=mid[1]; mid[1]=mid[2]; mid[2]=mid[3]; mid[3]=t;
}

void box_change(unsigned char mid[])
{
	int i;
	int a,b;
	for(i=0;i<4;i++)
	{
		a=mid[i]>>4;
		b=mid[i]&0xf;
		mid[i]=S[a][b];
	}
}

void extendkey(unsigned char key[],unsigned char endkey[])
{
	unsigned char tmp[4];
	int i;
	
	for(i=0;i<4;i++)
	{
		endkey[i*4+0]=key[i*4+0];
		endkey[i*4+1]=key[i*4+1];
		endkey[i*4+2]=key[i*4+2];
		endkey[i*4+3]=key[i*4+3];
	}
	
	for(i=4;i<44;i++)
	{
		tmp[0]=endkey[4*(i-1)+0]; 
		tmp[1]=endkey[4*(i-1)+1];
		tmp[2]=endkey[4*(i-1)+2];
		tmp[3]=endkey[4*(i-1)+3];
		
		if(i%4==0)
		{
			leftLoop(tmp);
			box_change(tmp);
			tmp[0]^=Rcon[i/4-1];

		}

		endkey[i*4+0]=tmp[0]^endkey[4*(i-4)+0];
		endkey[i*4+1]=tmp[1]^endkey[4*(i-4)+1];
		endkey[i*4+2]=tmp[2]^endkey[4*(i-4)+2];
		endkey[i*4+3]=tmp[3]^endkey[4*(i-4)+3];
	}
}

int main(void)
{
	unsigned char plain[17]="abcdefghijklmnop",key[17]="1234567812345678";
	unsigned char endkey[11*16+1];
	unsigned char out[16];
	unsigned char code[16]={0xCC,0x96,0xB9,0x6C,0x11,0xBD,0xAD,0x3A,0x7A,0x73,0xDB,0xCD,0x9E,0x5A,0xF2,0x44};
	int i;
	
	extendkey(key,endkey);
//	for(i=0;i<11*16;i++)
//	{
//		if(i%4==0)
//		{
//			printf(" ");
//		}		
//		printf("%02x",endkey[i]);
//	}
	AesEncrypt(plain,endkey,out);
	printf("加密后的数据是：") ;
	for (i = 0; i < 16; i++)
	{
		printf("0x%02x,", plain[i]);
	}
	
	printf("\n解密后的数据是：") ;
	AesDecrypt(code,endkey,out);
		for (i = 0; i < 16; i++)
	{
		printf("%c", code[i]);
	}	
}
