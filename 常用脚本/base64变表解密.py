# table=[ 0x40, 0x2C, 0x2E, 0x31, 0x66, 0x67, 0x76, 0x77, 0x23, 0x60,
#   0x2F, 0x32, 0x65, 0x68, 0x75, 0x78, 0x24, 0x7E, 0x22, 0x33,
#   0x64, 0x69, 0x74, 0x79, 0x25, 0x5F, 0x3B, 0x34, 0x63, 0x6A,
#   0x73, 0x7A, 0x5E, 0x2B, 0x7B, 0x35, 0x62, 0x6B, 0x72, 0x41,
#   0x26, 0x3D, 0x7D, 0x36, 0x61, 0x6C, 0x71, 0x42, 0x2A, 0x2D,
#   0x5B, 0x37, 0x30, 0x6D, 0x70, 0x43, 0x28, 0x29, 0x5D, 0x38,
#   0x39, 0x6E, 0x6F, 0x44]
# j=0
# for i in range(0,64):
#     print('%d:' %(j),end='')
#     print(' \'%c\', ' %table[i],end='')
#     j=j+1
#
# import base64
# dict={0: '@', 1: ',', 2: '.', 3: '1', 4: 'f', 5: 'g', 6: 'v', 7: 'w', 8: '#', 9: '`', 10: '/', 11: '2', 12: 'e', 13: 'h', 14: 'u', 15: 'x', 16: '$', 17: '~', 18: '"', 19: '3', 20: 'd', 21: 'i', 22: 't', 23: 'y', 24: '%', 25: '_', 26: ';', 27: '4', 28: 'c', 29: 'j', 30: 's', 31: 'z', 32: '^', 33: '+', 34: '{', 35: '5', 36: 'b', 37: 'k', 38: 'r', 39: 'A', 40: '&', 41: '=', 42: '}', 43: '6', 44: 'a', 45: 'l', 46: 'q', 47: 'B', 48: '*', 49: '-', 50: '[', 51: '7', 52: '0', 53: 'm', 54: 'p', 55: 'C', 56: '(', 57: ')', 58: ']', 59: '8', 60: '9', 61: 'n', 62: 'o', 63: 'D'}
# base64_list = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P','Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f','g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v','w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/']
# cipher='3g6L2PWL2PXFmR+7ise7iq=='
# res =''
# for i in range(len(cipher)):
#     for j in range(64):
#         if(dict[j]==cipher[i]):
#             res+=base64_list[j]
# flag=base64.b64decode(res)
# print("\n")
# print(flag)




import base64

base1 = 'QVEJAfHmUYjBac+u8Ph5n9Od16FrICL/X0GvtM4qk7T2z3wNSsyoebilxWKgZpRD'
t = 'Fi9X/fxX6Q6JBfUfBM1V/y6V6PcPjMaQLl9IuttFuH68'
base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
ans = ''

for i in t:
	ans += base[base1.index(i)]
print(ans)
print(base64.b64decode(ans))


import base64
import string

# str1 ="PuY26Tc5TLbaPnO35aQy915cFX8cYK6CLRtBKkCveG=="
# string1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/'
# string2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
#
# print(base64.b64decode(str1.translate(str.maketrans(string1, string2))))
# s=b'\xa5L\xb6\xea\xd0\xb9\xb6P@\xa4\xda7\xe4\n\x98\xf7^B\x7f\x1f\x02\xcaN\x9c\x96\xb4\xdb\x90\xa7\x15\x12'
# for i in s:
# 	print(hex(i),end=',')

str1 ='Fi9X/fxX6Q6JBfUfBM1V/y6V6PcPjMaQLl9IuttFuH68'
string1 = 'QVEJAfHmUYjBac+u8Ph5n9Od16FrICL/X0GvtM4qk7T2z3wNSsyoebilxWKgZpRD'
string2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

print(base64.b64decode(str1.translate(str.maketrans(string1, string2))))


from z3 import *

ss = Solver()
# s= [BitVec('s[%d]'%i,16) for i in range(33)
s = [BitVec('flag[%d]' % i, 8) for i in range(33)]
j = 0
i = 0
table = [0x6D, 0x53, 0x77, 0x60, 0x5A, 0x6A, 0xE6, 0x98, 0xCF, 0xE7, 0x65, 0x4B, 0x2F,
         0xC9, 0xF6, 0xAD, 0xA0, 0x1F, 0xE5, 0x2A, 0xC6, 0x9E, 0xBE, 0x85, 0xDF, 0xDD, 0x10, 0x15, 0xEF,
         0xE0, 0x36, 0x2B, 0xC3, 0x57, 0x23, 0x99, 0x46, 0x5F, 0x31, 0x6E, 0x9A, 0xB7, 0xE2, 0xB2, 0x03,
         0x48, 0x69, 0x3A, 0xA1, 0xDE, 0xD8, 0x1D, 0x7C, 0x3C, 0xD0, 0xBD, 0xF1, 0xB3, 0xF0, 0x44, 0xA9,
         0x95, 0x18, 0x33
         ]
cmp = [0xC3, 0x53, 0x1F, 0xBD, 0xE2, 0x60, 0xE0, 0x2A, 0x6E, 0xD8, 0xC9, 0x2F, 0xE2, 0xD8, 0x9E,
       0xBE, 0x31, 0x1D, 0x95, 0x95, 0xC3, 0x1D, 0xE0, 0x5F, 0xC3, 0x6D, 0x9E, 0x85, 0x48, 0x60, 0xDE,
       0x85, 0xB7, 0x60, 0x3C, 0x2B, 0x5F, 0x99, 0x57, 0xA1, 0x23, 0x57, 0x48, 0xE7
       ]

for k in cmp:
    print(table.index(k),end=',')
index=[32,1,17,55,42,3,29,19,39,50,13,12,42,50,21,22,38,51,61,61,32,51,29,37,32,0,21,23,45,3,49,23,41,3,53,31,37,35,33,48,34,33,45,9]


while (j < 42):
    ss.add(index[j] == (s[i] >> 2) ^ 0x34)

    ss.add(index[j + 1] == ((s[i] & 0x3) << 4 | (s[i + 1] >> 4)) ^ 0x34)

    ss.add(index[j + 2] == ((s[i + 1] & 0xf) << 2 | (s[i + 2] >> 6)) ^ 0x34)

    ss.add(index[j + 3] == (s[i + 2] & 0x3f ^ 0x34))
    i += 3
    j += 4

if ss.check() == sat:
    ans = ss.model()
    print(ans)
else:
    print("no ans!")
flag=[0]*33
flag[3] = 123
flag[1] = 89
flag[15] = 80
flag[16] = 122
flag[26] = 107
flag[11] = 98
flag[18] = 83
flag[9] = 120
flag[6] = 76
flag[24] = 119
flag[22] = 113
flag[30] = 89
flag[14] = 73
flag[0] = 83
flag[25] = 112
flag[28] = 117
flag[19] = 72
flag[10] = 104
flag[20] = 99
flag[23] = 99
flag[21] = 103
flag[7] = 110
flag[17] = 81
flag[4] = 122
flag[29] = 68
flag[2] = 67
flag[5] = 103
flag[12] = 72
flag[13] = 114
flag[27] = 69
flag[32] = 125
flag[31] = 86
for i in flag:
    print(chr(i),end='')

import base64

base1 = [ 0x26, 0x14, 0xB5, 0x17, 0x06, 0xA2, 0xF2, 0xC2, 0x7F, 0x9D,
  0xA7, 0x02, 0x6C, 0x85, 0x07, 0x57, 0xFB, 0xC0, 0x94, 0xF7,
  0x95, 0x4B, 0x44, 0x8A, 0x8E, 0xCD, 0x84, 0xEF, 0x6B, 0xBD,
  0x37, 0xF4, 0xEB, 0x9C, 0x9B, 0x48, 0xC6, 0x74, 0x3F, 0xBC,
  0xC9, 0xE0, 0x08, 0xB7, 0xE6, 0x35, 0xA3, 0x69, 0x82, 0x9F,
  0x2F, 0x11, 0x59, 0x4D, 0xE2, 0x19, 0x78, 0x81, 0xC5, 0xAC,
  0x16, 0x75, 0x83, 0xAD]
t = [ 0xC5, 0xEF, 0x02, 0x35, 0x82, 0xEF, 0xBC, 0x57, 0xE2, 0x81,
  0xC2, 0x3F, 0x78, 0xAC, 0xB7, 0x37, 0xAD, 0x9D, 0xB7, 0xE0,
  0x83, 0x84, 0xF4, 0x17, 0x4D, 0x08, 0xAC, 0x08, 0x78, 0x78,
  0xC2, 0x35, 0xAD, 0x84, 0xF4, 0x75, 0x2F, 0xB7, 0xBC, 0x9C,
  0x19, 0xAC, 0x02, 0xF7]
base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
ans = ''

for i in t:
	ans += base[base1.index(i)^0x2e]
print(ans)
print(base64.b64decode(ans))